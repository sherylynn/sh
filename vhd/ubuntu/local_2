fi
	
	######################################
	#                                   kloop by niumao                                #
	######################################

if [ -n "$upperdir" ] && [ -n "$workdir" ];  then

	### reset the value of the root variable 
	HOSTDEV="${ROOT}"
	NEWROOT="${rootmnt}"
	
	###  auto probe the fs-type of the partition in which dir-root live and mount it  /host 
	mkdir -p /host
	if [ -e $NEWROOT$upperdir ]; then
		mount --move  $NEWROOT  /host
	else
		if [ -z "$hostfstype" ]; then
			hostfstype="$(blkid -s TYPE -o value "${HOSTDEV}")"
			[ -z "$hostfstype"  -o "${hostfstype}" = "ntfs" ] && hostfstype="ntfs-3g"
		fi
		[ "${hostfstype}" = "ntfs-3g" ] || modprobe ${hostfstype}
		mount -t ${hostfstype} -o rw  ${HOSTDEV}  /host
	fi
	
	###try to boot from dir-root
	modprobe overlay
	if [ -z "$lowerdir" ]; then
	mkdir  /run/lowerdir 
	lowerdir="/run/lowerdir" 
	fi	
	mount  -t overlay overlay -o lowerdir=$lowerdir,upperdir=/host$upperdir,workdir=/host$workdir $NEWROOT

	### mount /host in initrd to /host of the realrootfs
	if [  "${hosthidden}" != "y" ] ; then
		[ -d "${NEWROOT}"/host ] || mkdir -p ${NEWROOT}/host 
		mount --move /host   ${NEWROOT}/host
	fi
fi	

if [ -n "$squashfs" ];  then

	### reset the value of the root variable 
	HOSTDEV="${ROOT}"
	NEWROOT="${rootmnt}"

	###  auto probe the fs-type of the partition in which sfs-file live and mount it  /host 
	mkdir -p /host
	if [ -e $NEWROOT$squashfs ]; then
		mount --move  $NEWROOT  /host
	else
		if [ -z "$hostfstype" ]; then
			hostfstype="$(blkid -s TYPE -o value "${HOSTDEV}")"
			[ -z "$hostfstype"  -o "${hostfstype}" = "ntfs" ] && hostfstype="ntfs-3g"
		fi
		[ "${hostfstype}" = "ntfs-3g" ] || modprobe ${hostfstype}
		mount -t ${hostfstype} -o rw  ${HOSTDEV}  /host
	fi
	
	###try to boot from squashfs
	modprobe overlay
	mkdir  -p /run/lowerdir /run/upperdir  /run/workdir
	mount  /host$squashfs  /run/lowerdir
	mount  -t overlay overlay -o lowerdir=/run/lowerdir,upperdir=/run/upperdir,workdir=/run/workdir    $NEWROOT

	### mount /host in initrd to /host of the realrootfs
	if [  "${hosthidden}" != "y" ] ; then
		[ -d "${NEWROOT}"/host ] || mkdir -p ${NEWROOT}/host 
		mount --move /host   ${NEWROOT}/host
	fi
fi	

if [ -n "$kloop" ]; then

	### reset the value of the root variable 
	HOSTDEV="${ROOT}"
	NEWROOT="${rootmnt}"
	[ -n "$kroot" ] && ROOT="$kroot"
	[ -n "$kroot" ] || ROOT="/dev/loop0"
	export ROOT
	realroot="$ROOT"

	###  auto probe the fs-type of the partition in which vhd-file live and mount it  /host 
	mkdir -p /host
	if [ -e $NEWROOT$kloop ]; then
		mount --move  $NEWROOT  /host
	else
		if [ -z "$hostfstype" ]; then
			hostfstype="$(blkid -s TYPE -o value "${HOSTDEV}")"
			[ -z "$hostfstype"  -o "${hostfstype}" = "ntfs" ] && hostfstype="ntfs-3g"
		fi
		[ "${hostfstype}" = "ntfs-3g" ] || modprobe ${hostfstype}
		mount -t ${hostfstype} -o rw  ${HOSTDEV}  /host
	fi

	### mount the vhd-file on a loop-device 
	if [ "${kloop#/}" !=  "${kloop}" ]; then       	
		modprobe  loop  
		kpartx -av /host$kloop
		[ -e "$realroot" ] || sleep 3
	fi

	### probe lvm on vhd-file
	if [ -n "$klvm" ];  then
		modprobe dm-mod
		vgscan
		vgchange  -ay  $klvm
		[ -e "$realroot" ] ||  sleep 3
	fi 

	if [ "${readonly}" = "y" ] ; then
		roflag="-r"
	else
		roflag="-w"
	fi
	 
	### mount the realroot / in vhd-file on $NEWROOT 
	if [ -z "${kloopfstype}" ]; then
		kloopfstype="$(blkid -s TYPE -o value "$realroot")"
		[ -z "${kloopfstype}" ] && kloopfstype="ext4"
	fi
	[ -e "$realroot" ] || sleep 3
	mount    ${roflag} -t "${kloopfstype}"  $realroot $NEWROOT
	
	### mount /host in initrd to /host of the realrootfs
	if [  "${hosthidden}" != "y" ] ; then
		[ -d "${NEWROOT}"/host ] || mkdir -p ${NEWROOT}/host 
		mount --move /host   ${NEWROOT}/host
	fi
fi

	######################################
	#                                   kloop by niumao                                #
	######################################
